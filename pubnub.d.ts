import common = require('./pubnub.common');
export declare class PubNub extends common.PubNub {
    constructor(...args: any[]);
    subscribe(...args: any[]): Promise<any>;
    publish(...args: any[]): Promise<any>;
    time(): Promise<any>;
    unsubscribe(...args: any[]): void;
    unsubscribeAll(): void;
    globalHereNow(): Promise<any>;
    hereNow(...args: any[]): Promise<any>;
    whereNow(...args: any[]): Promise<any>;
    presence(channel: string): Promise<any>;
    uuid(): string;
    getUUID(): string;
    setUUID(uuid: string): void;
    setAuthKey(key: string): void;
    getAuthKey(): string;
    unsetAuthKey(): void;
    setFilter(filter: string): void;
    getFilter(): any;
    getState(channel: string, uuid: string): Promise<any>;
    setState(channel: string, uuid: string, state: any): Promise<any>;
    history(...args: any[]): Promise<any>;
    setHeartbeat(beat: any): void;
    setHeartbeatInterval(beatInt: any): void;
    setResumeOnReconnect(value: any): void;
    channelGroupAddChannel(...args: any[]): Promise<any>;
    pamGrant(...args: any[]): Promise<any>;
    pamAuditChannelGroup(...args: any[]): Promise<any>;
    pamGrantChannelGroup(...args: any[]): Promise<any>;
    channelGroupListChannels(group: string): Promise<any>;
    channelGroupSubscribe(group: string): Promise<any>;
    channelGroupRemoveGroup(group: string): Promise<any>;
    channelGroupRemoveChannel(...args: any[]): Promise<any>;
    channelGroupSetState(group: string, uuid: string, state: any): Promise<any>;
    channelGroupUnsubscribe(...args: any[]): void;
    unsubscribeAllChannels(): void;
    shutdown(): void;
    instance: any;
}
